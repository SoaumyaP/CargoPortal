{"version":3,"sources":["ng://angular-auth-oidc-client/lib/models/auth.well-known-endpoints.ts","ng://angular-auth-oidc-client/lib/models/authorization-result.ts","ng://angular-auth-oidc-client/lib/models/authorization-state.enum.ts","ng://angular-auth-oidc-client/lib/models/jwtkeys.ts","ng://angular-auth-oidc-client/lib/models/validation-result.enum.ts","ng://angular-auth-oidc-client/lib/models/validate-state-result.model.ts","ng://angular-auth-oidc-client/lib/modules/auth.configuration.ts","ng://angular-auth-oidc-client/lib/data-services/oidc-data.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.logger.service.ts","ng://angular-auth-oidc-client/lib/services/existing-iframe.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-equality-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-token-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.storage.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.common.ts","node_modules/tslib/tslib.es6.js","ng://angular-auth-oidc-client/lib/services/oidc.security.validation.ts","ng://angular-auth-oidc-client/lib/services/oidc-security-state-validation.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.check-session.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.config.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.silent-renew.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.user-service.ts","ng://angular-auth-oidc-client/lib/services/uri-encoder.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.service.ts","ng://angular-auth-oidc-client/lib/modules/auth.module.ts"],"names":["AuthWellKnownEndpoints","this","issuer","jwks_uri","authorization_endpoint","token_endpoint","userinfo_endpoint","end_session_endpoint","check_session_iframe","revocation_endpoint","introspection_endpoint","prototype","setWellKnownEndpoints","data","AuthorizationResult","authorizationState","validationResult","authorized","forbidden","unauthorized","JwtKeys","keys","JwtKey","kty","use","kid","x5t","e","n","x5c","NotSet","StatesDoNotMatch","SignatureFailed","IncorrectNonce","RequiredPropertyMissing","MaxOffsetExpired","IssDoesNotMatchIssuer","NoAuthWellKnownEndPoints","IncorrectAud","TokenExpired","IncorrectAtHash","Ok","LoginRequired","SecureTokenServerError","ValidateStateResult","access_token","id_token","authResponseIsValid","decoded_id_token","state","ValidationResult","OpenIDImplicitFlowConfiguration","stsServer","redirect_url","client_id","response_type","scope","hd_param","post_logout_redirect_uri","start_checksession","silent_renew","silent_renew_url","silent_renew_offset_in_seconds","silent_redirect_url","post_login_route","forbidden_route","unauthorized_route","auto_userinfo","auto_clean_state_after_authentication","trigger_authorization_result_event","log_console_warning_active","log_console_debug_active","iss_validation_off","history_cleanup_off","max_id_token_iat_offset_allowed_in_seconds","disable_iat_offset_validation","storage","Storage","sessionStorage","AuthConfiguration","platformId","_onConfigurationChange","Subject","defaultConfig","Object","defineProperty","openIDImplicitFlowConfiguration","isPlatformBrowser","init","next","asObservable","Injectable","decorators","type","Inject","args","PLATFORM_ID","OidcDataService","httpClient","getWellknownEndpoints","url","headers","HttpHeaders","set","get","getIdentityUserData","token","decodeURIComponent","HttpClient","LoggerService","authConfiguration","logError","message","console","error","logWarning","isLogLevelWarningEnabled","warn","logDebug","isLogLevelDebugEnabled","log","IFrameService","loggerService","getExistingIFrame","identifier","iFrameOnParent","getIFrameFromParentWindow","getIFrameFromWindow","addIFrameToWindowBody","sessionIframe","window","document","createElement","id","style","display","body","appendChild","parent","getElementById","EqualityHelperService","areEqual","value1","value2","bothValuesAreArrays","arraysEqual","bothValuesAreStrings","bothValuesAreObjects","JSON","stringify","toLowerCase","oneValueIsStringAndTheOtherIsArray","Array","isArray","valueIsString","valueIsObject","value","String","arr1","arr2","length","i","TokenHelperService","PARTS_OF_TOKEN","getTokenExpirationDate","dataIdToken","hasOwnProperty","Date","date","setUTCSeconds","exp","getHeaderFromToken","encoded","tokenIsValid","getPartOfToken","getPayloadFromToken","getSignatureFromToken","index","partOfToken","extractPartOfToken","result","urlBase64Decode","parse","str","output","replace","Error","decoded","atob","Buffer","toString","split","map","c","charCodeAt","slice","join","err","includes","OidcSecurityStorage","BrowserStorage","hasStorage","read","key","getItem","write","undefined","setItem","OidcSecurityCommon","oidcSecurityStorage","storage_auth_result","storage_access_token","storage_id_token","storage_is_authorized","storage_user_data","storage_auth_nonce","storage_code_verifier","storage_auth_state_control","storage_session_state","storage_silent_renew_running","storage_custom_request_params","retrieve","store","resetStorageData","isRenewProcess","getAccessToken","getIdToken","__values","o","m","Symbol","iterator","call","done","OidcSecurityValidation","arrayHelperService","tokenHelperService","isTokenExpired","offsetSeconds","validate_id_token_exp_not_expired","tokenExpirationDate","tokenExpirationValue","valueOf","nowWithOffset","tokenNotExpired","validate_required_id_token","validated","validate_id_token_iat_max_offset","max_offset_allowed_in_seconds","dateTime_iat_id_token","iat","validate_id_token_nonce","local_nonce","nonce","validate_id_token_iss","authWellKnownEndpoints_issuer","iss","validate_id_token_aud","aud","validateStateFromHashCallback","local_state","validate_userdata_sub_id_token","id_token_sub","userdata_sub","validate_signature_id_token","jwtkeys","header_data","constructor","alg","isValid","_h","tslib_1.__values","_j","publickey","KEYUTIL","getKey","KJUR","jws","JWS","verify","amountOfMatchingKeys","_d","_e","_f","_g","config_validate_response_type","validate_id_token_at_hash","at_hash","isCodeFlow","testdata","generate_at_hash","testValue","hash","crypto","Util","hashString","first128bits","substr","hextob64u","generate_code_verifier","code_challenge","StateValidationService","oidcSecurityCommon","oidcSecurityValidation","authWellKnownEndpoints","setupModule","assign","validateState","jwtKeys","toReturn","authStateControl","handleUnsuccessfulValidation","authNonce","handleSuccessfulValidation","IFRAME_FOR_CHECK_SESSION_IDENTIFIER","OidcSecurityCheckSession","iFrameService","zone","lastIFrameRefresh","outstandingMessages","heartBeatInterval","iframeRefreshInterval","_onCheckSessionChanged","doesSessionExist","existingIFrame","_this","now","from","iframeMessageEvent","messageHandler","bind","addEventListener","contentWindow","location","Observable","create","observer","onload","complete","startCheckingSession","clientId","scheduledHeartBeat","pollServerSession","stopCheckingSession","clearScheduledHeartBeat","_pollServerSessionRecur","pipe","take","subscribe","session_state","sessionState","postMessage","setTimeout","runOutsideAngular","clearTimeout","origin","source","NgZone","OidcConfigService","_onConfigurationLoaded","load","configUrl","response","clientConfiguration","load_using_stsServer","catchError","of","wellKnownEndpoints","load_using_custom_stsServer","IFRAME_FOR_SILENT_RENEW_IDENTIFIER","OidcSecuritySilentRenew","isRenewInitialized","initRenew","startRenew","OidcSecurityUserService","oidcDataService","userData","initUserData","getUserData","setUserData","UriEncoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeValue","OidcSecurityService","stateValidationService","router","oidcSecurityCheckSession","oidcSecuritySilentRenew","oidcSecurityUserService","_onModuleSetup","_onAuthorizationResult","checkSessionChanged","moduleSetup","_isModuleSetup","BehaviorSubject","_isAuthorized","_userData","authWellKnownEndpointsLoaded","runTokenValidationRunning","onModuleSetup","_isSetupAndAuthorized","filter","isModuleSetup","switchMap","tap","race$","isAuthorized","race","timer","resetAuthorizationData","refreshSession","switchMapTo","shareReplay","isSetupAndAuthorized","onConfigurationChange","onCheckSessionChanged","idToken","setIsAuthorized","runTokenValidation","boundSilentRenewEvent","silentRenewEventHandler","instanceId_1","Math","random","boundSilentRenewInitEvent_1","detail","removeEventListener","dispatchEvent","CustomEvent","getIsModuleSetup","getIsAuthorized","getToken","getValue","getPayloadFromIdToken","encode","setState","getState","setCustomRequestParameters","params","customRequestParams","authorize","urlHandler","code_verifier","createAuthorizeUrl","redirectTo","authorizedCallbackWithCode","urlToCheck","urlParts","HttpParams","fromString","code","requestTokensWithCode","requestTokensWithCodeProcedure","tokenRequestUrl","silentRenewRunning","post","obj","authorizedCodeFlowCallbackProcedure","authorizedCallbackProcedure","authorizedImplicitFlowCallbackProcedure","reduce","resultData","item","parts","shift","authorizedImplicitFlowCallback","href","authResult","history","replaceState","title","pathname","AuthorizationState","navigate","getSigningKeys","getValidatedStateResult","setAuthorizationData","getUserinfo","sub","accessToken","logoff","id_token_hint","createEndSessionUrl","handleError","status","silentRenew","startCheckingSilentRenew","stopCheckingSilentRenew","_scheduledHeartBeat","getEndSessionUrl","prompt","authorizationUrl","encoder","append","customParams","forEach","authorizationEndsessionUrl","handleErrorGetSigningKeys","errMsg","Response","json","statusText","observableThrowError","silentRenewHeartBeatCheck","Router","AuthModule","forRoot","ngModule","providers","provide","useClass","NgModule"],"mappings":"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","sourcesContent":["export class AuthWellKnownEndpoints {\n    issuer = '';\n    jwks_uri = '';\n    authorization_endpoint = '';\n    token_endpoint = '';\n    userinfo_endpoint = '';\n    end_session_endpoint = '';\n    check_session_iframe = '';\n    revocation_endpoint = '';\n    introspection_endpoint = '';\n\n    public setWellKnownEndpoints(data: any) {\n        this.issuer = data.issuer;\n        this.jwks_uri = data.jwks_uri;\n        this.authorization_endpoint = data.authorization_endpoint;\n        this.token_endpoint = data.token_endpoint;\n        this.userinfo_endpoint = data.userinfo_endpoint;\n\n        if (data.end_session_endpoint) {\n            this.end_session_endpoint = data.end_session_endpoint;\n        }\n\n        if (data.check_session_iframe) {\n            this.check_session_iframe = data.check_session_iframe;\n        }\n\n        if (data.revocation_endpoint) {\n            this.revocation_endpoint = data.revocation_endpoint;\n        }\n\n        if (data.introspection_endpoint) {\n            this.introspection_endpoint = data.introspection_endpoint;\n        }\n    }\n}\n","import { AuthorizationState } from './authorization-state.enum';\nimport { ValidationResult } from './validation-result.enum';\n\nexport class AuthorizationResult {\n    constructor(\n        public authorizationState: AuthorizationState,\n        public validationResult: ValidationResult\n    ) {}\n}\n","export enum AuthorizationState {\n    authorized = 'authorized',\n    forbidden = 'forbidden',\n    unauthorized = 'unauthorized'\n}\n","export class JwtKeys {\n    keys: JwtKey[] = [];\n}\n\nexport class JwtKey {\n    kty = '';\n    use = '';\n    kid = '';\n    x5t = '';\n    e = '';\n    n = '';\n    x5c: any[] = [];\n}\n","export enum ValidationResult {\n    NotSet = 'NotSet',\n    StatesDoNotMatch = 'StatesDoNotMatch',\n    SignatureFailed = 'SignatureFailed',\n    IncorrectNonce = 'IncorrectNonce',\n    RequiredPropertyMissing = 'RequiredPropertyMissing',\n    MaxOffsetExpired = 'MaxOffsetExpired',\n    IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\n    NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\n    IncorrectAud = 'IncorrectAud',\n    TokenExpired = 'TokenExpired',\n    IncorrectAtHash = 'IncorrectAtHash',\n    Ok = 'Ok',\n    LoginRequired = 'LoginRequired',\n    SecureTokenServerError = 'SecureTokenServerError'\n}\n","import { ValidationResult } from './validation-result.enum';\n\nexport class ValidateStateResult {\n    constructor(\n        public access_token = '',\n        public id_token = '',\n        public authResponseIsValid = false,\n        public decoded_id_token: any = {},\n        public state: ValidationResult = ValidationResult.NotSet\n    ) {}\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable, Subject } from 'rxjs';\n\nexport class OpenIDImplicitFlowConfiguration {\n    stsServer = 'https://localhost:44318';\n    redirect_url = 'https://localhost:44311';\n    // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n    // by the iss (issuer) Claim as an audience.\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n    // or if it contains additional audiences not trusted by the Client.\n    client_id = 'angularclient';\n    response_type = 'id_token token';\n    scope = 'openid email profile';\n    // Only for Google Auth with particular G Suite domain, see https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\n    hd_param = '';\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\n    start_checksession = false;\n    silent_renew = false;\n    silent_renew_url = 'https://localhost:44311';\n    silent_renew_offset_in_seconds = 0;\n    silent_redirect_url = 'https://localhost:44311';\n    post_login_route = '/';\n    // HTTP 403\n    forbidden_route = '/forbidden';\n    // HTTP 401\n    unauthorized_route = '/unauthorized';\n    auto_userinfo = true;\n    auto_clean_state_after_authentication = true;\n    trigger_authorization_result_event = false;\n    log_console_warning_active = true;\n    log_console_debug_active = false;\n    iss_validation_off = false;\n    history_cleanup_off = false;\n\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n    max_id_token_iat_offset_allowed_in_seconds = 3;\n    disable_iat_offset_validation = false;\n\n    storage = typeof Storage !== 'undefined' ? sessionStorage : null;\n}\n\n@Injectable()\nexport class AuthConfiguration {\n    private openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration | undefined;\n    private defaultConfig: OpenIDImplicitFlowConfiguration;\n\n    get stsServer(): string {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.stsServer;\n        }\n\n        return this.defaultConfig.stsServer;\n    }\n\n    get redirect_url(): string {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.redirect_url;\n        }\n\n        return this.defaultConfig.redirect_url;\n    }\n\n    get silent_redirect_url(): string {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.silent_renew_url;\n        }\n\n        return this.defaultConfig.silent_renew_url;\n    }\n\n    get client_id(): string {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.client_id;\n        }\n\n        return this.defaultConfig.client_id;\n    }\n\n    get response_type(): string {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.response_type;\n        }\n\n        return this.defaultConfig.response_type;\n    }\n\n    get scope(): string {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.scope;\n        }\n\n        return this.defaultConfig.scope;\n    }\n\n    get hd_param(): string {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.hd_param;\n        }\n\n        return this.defaultConfig.hd_param;\n    }\n\n    get post_logout_redirect_uri(): string {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.post_logout_redirect_uri;\n        }\n\n        return this.defaultConfig.post_logout_redirect_uri;\n    }\n\n    get start_checksession(): boolean {\n        if (!isPlatformBrowser(this.platformId)) {\n            return false;\n        }\n\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.start_checksession;\n        }\n\n        return this.defaultConfig.start_checksession;\n    }\n\n    get silent_renew(): boolean {\n        if (!isPlatformBrowser(this.platformId)) {\n            return false;\n        }\n\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.silent_renew;\n        }\n\n        return this.defaultConfig.silent_renew;\n    }\n\n    get silent_renew_offset_in_seconds(): number {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds;\n        }\n\n        return this.defaultConfig.silent_renew_offset_in_seconds;\n    }\n\n    get post_login_route(): string {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.post_login_route;\n        }\n\n        return this.defaultConfig.post_login_route;\n    }\n\n    get forbidden_route(): string {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.forbidden_route;\n        }\n\n        return this.defaultConfig.forbidden_route;\n    }\n\n    get unauthorized_route(): string {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.unauthorized_route;\n        }\n\n        return this.defaultConfig.unauthorized_route;\n    }\n\n    get auto_userinfo(): boolean {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.auto_userinfo;\n        }\n\n        return this.defaultConfig.auto_userinfo;\n    }\n\n    get auto_clean_state_after_authentication(): boolean {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.auto_clean_state_after_authentication;\n        }\n\n        return this.defaultConfig.auto_clean_state_after_authentication;\n    }\n\n    get trigger_authorization_result_event(): boolean {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.trigger_authorization_result_event;\n        }\n\n        return this.defaultConfig.trigger_authorization_result_event;\n    }\n\n    get isLogLevelWarningEnabled(): boolean {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.log_console_warning_active;\n        }\n\n        return this.defaultConfig.log_console_warning_active;\n    }\n\n    get isLogLevelDebugEnabled(): boolean {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.log_console_debug_active;\n        }\n\n        return this.defaultConfig.log_console_debug_active;\n    }\n\n    get iss_validation_off(): boolean {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.iss_validation_off;\n        }\n\n        return this.defaultConfig.iss_validation_off;\n    }\n\n    get history_cleanup_off(): boolean {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.history_cleanup_off;\n        }\n\n        return this.defaultConfig.history_cleanup_off;\n    }\n\n    get max_id_token_iat_offset_allowed_in_seconds(): number {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds;\n        }\n\n        return this.defaultConfig.max_id_token_iat_offset_allowed_in_seconds;\n    }\n\n    get disable_iat_offset_validation(): boolean {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.disable_iat_offset_validation;\n        }\n\n        return this.defaultConfig.disable_iat_offset_validation;\n    }\n\n    get storage(): any {\n        if (this.openIDImplicitFlowConfiguration) {\n            return this.openIDImplicitFlowConfiguration.storage;\n        }\n\n        return this.defaultConfig.storage;\n    }\n\n    constructor(@Inject(PLATFORM_ID) private platformId: Object) {\n        this.defaultConfig = new OpenIDImplicitFlowConfiguration();\n    }\n\n    init(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration) {\n        this.openIDImplicitFlowConfiguration = openIDImplicitFlowConfiguration;\n        this._onConfigurationChange.next(openIDImplicitFlowConfiguration);\n    }\n\n    private _onConfigurationChange = new Subject<OpenIDImplicitFlowConfiguration>();\n    get onConfigurationChange(): Observable<OpenIDImplicitFlowConfiguration> {\n        return this._onConfigurationChange.asObservable();\n    }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class OidcDataService {\n    constructor(private httpClient: HttpClient) {}\n\n    getWellknownEndpoints<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers,\n        });\n    }\n\n    getIdentityUserData<T>(url: string, token: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n        headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\n\n        return this.httpClient.get<T>(url, {\n            headers: headers,\n        });\n    }\n\n    get<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers: headers,\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n\n@Injectable()\nexport class LoggerService {\n    constructor(private authConfiguration: AuthConfiguration) {}\n\n    logError(message: any) {\n        console.error(message);\n    }\n\n    logWarning(message: any) {\n        if (this.authConfiguration.isLogLevelWarningEnabled) {\n            console.warn(message);\n        }\n    }\n\n    logDebug(message: any) {\n        if (this.authConfiguration.isLogLevelDebugEnabled) {\n            console.log(message);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from './oidc.logger.service';\n\n@Injectable()\nexport class IFrameService {\n    constructor(private loggerService: LoggerService) {}\n\n    getExistingIFrame(identifier: string) {\n        const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\n\n        if (iFrameOnParent) {\n            return iFrameOnParent;\n        }\n\n        return this.getIFrameFromWindow(identifier);\n    }\n\n    addIFrameToWindowBody(identifier: string) {\n        const sessionIframe = window.document.createElement('iframe');\n        sessionIframe.id = identifier;\n        this.loggerService.logDebug(sessionIframe);\n        sessionIframe.style.display = 'none';\n        window.document.body.appendChild(sessionIframe);\n        return sessionIframe;\n    }\n\n    private getIFrameFromParentWindow(identifier: string) {\n        return window.parent.document.getElementById(identifier);\n    }\n\n    private getIFrameFromWindow(identifier: string) {\n        return window.document.getElementById(identifier);\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class EqualityHelperService {\n    areEqual(value1: string | any[] | object | null | undefined, value2: string | any[] | object | null | undefined) {\n        if (!value1 || !value2) {\n            return false;\n        }\n\n        if (this.bothValuesAreArrays(value1, value2)) {\n            return this.arraysEqual(value1 as any[], value2 as any[]);\n        }\n\n        if (this.bothValuesAreStrings(value1, value2)) {\n            return value1 === value2;\n        }\n\n        if (this.bothValuesAreObjects(value1, value2)) {\n            return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\n        }\n\n        if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n            if (Array.isArray(value1) && this.valueIsString(value2)) {\n                return value1[0] === value2;\n            }\n            if (Array.isArray(value2) && this.valueIsString(value1)) {\n                return value2[0] === value1;\n            }\n        }\n    }\n\n    private oneValueIsStringAndTheOtherIsArray(value1: string | object | any[], value2: string | object | any[]) {\n        return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\n    }\n\n    private bothValuesAreObjects(value1: string | object | any[], value2: string | object | any[]) {\n        return this.valueIsObject(value1) && this.valueIsObject(value2);\n    }\n\n    private bothValuesAreStrings(value1: string | object | any[], value2: string | object | any[]) {\n        return this.valueIsString(value1) && this.valueIsString(value2);\n    }\n\n    private bothValuesAreArrays(value1: string | object | any[], value2: string | object | any[]) {\n        return Array.isArray(value1) && Array.isArray(value2);\n    }\n\n    private valueIsString(value: any) {\n        return typeof value === 'string' || value instanceof String;\n    }\n\n    private valueIsObject(value: any) {\n        return typeof value === 'object';\n    }\n\n    private arraysEqual(arr1: Array<string>, arr2: Array<string>) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n\n        for (let i = arr1.length; i--; ) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from './oidc.logger.service';\n\n@Injectable()\nexport class TokenHelperService {\n    private PARTS_OF_TOKEN = 3;\n    constructor(private readonly loggerService: LoggerService) {}\n\n    getTokenExpirationDate(dataIdToken: any): Date {\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            return new Date();\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(dataIdToken.exp);\n\n        return date;\n    }\n\n    getHeaderFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 0, encoded);\n    }\n\n    getPayloadFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 1, encoded);\n    }\n\n    getSignatureFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 2, encoded);\n    }\n\n    private getPartOfToken(token: string, index: number, encoded: boolean) {\n        const partOfToken = this.extractPartOfToken(token, index);\n\n        if (encoded) {\n            return partOfToken;\n        }\n\n        const result = this.urlBase64Decode(partOfToken);\n        return JSON.parse(result);\n    }\n\n    private urlBase64Decode(str: string) {\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\n        switch (output.length % 4) {\n            case 0:\n                break;\n            case 2:\n                output += '==';\n                break;\n            case 3:\n                output += '=';\n                break;\n            default:\n                throw Error('Illegal base64url string!');\n        }\n\n        const decoded = typeof window !== 'undefined' ? window.atob(output) : new Buffer(output, 'base64').toString('binary');\n\n        try {\n            // Going backwards: from bytestream, to percent-encoding, to original string.\n            return decodeURIComponent(decoded.split('')\n                .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n                .join(''));\n        } catch (err) {\n            return decoded;\n        }\n    }\n\n    private tokenIsValid(token: string) {\n        if (!token) {\n            this.loggerService.logError(`token '${token}' is not valid --> token falsy`);\n            return false;\n        }\n\n        if (!(token as string).includes('.')) {\n            this.loggerService.logError(`token '${token}' is not valid --> no dots included`);\n            return false;\n        }\n\n        const parts = token.split('.');\n\n        if (parts.length !== this.PARTS_OF_TOKEN) {\n            this.loggerService.logError(`token '${token}' is not valid --> token has t have exact three dots`);\n            return false;\n        }\n\n        return true;\n    }\n\n    private extractPartOfToken(token: string, index: number) {\n        return token.split('.')[index];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class OidcSecurityStorage {\n    /**\n     * This method must contain the logic to read the storage.\n     * @param key\n     * @return The value of the given key\n     */\n    public abstract read(key: string): any;\n\n    /**\n     * This method must contain the logic to write the storage.\n     * @param key\n     * @param value The value for the given key\n     */\n    public abstract write(key: string, value: any): void;\n}\n\n@Injectable()\nexport class BrowserStorage implements OidcSecurityStorage {\n    private hasStorage: boolean;\n\n    constructor(private authConfiguration: AuthConfiguration) {\n        this.hasStorage = typeof Storage !== 'undefined';\n    }\n\n    public read(key: string): any {\n        if (this.hasStorage) {\n            return JSON.parse(this.authConfiguration.storage.getItem(key + '_' + this.authConfiguration.client_id));\n        }\n\n        return;\n    }\n\n    public write(key: string, value: any): void {\n        if (this.hasStorage) {\n            value = value === undefined ? null : value;\n            this.authConfiguration.storage.setItem(key + '_' + this.authConfiguration.client_id, JSON.stringify(value));\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { OidcSecurityStorage } from './oidc.security.storage';\n\nexport type SilentRenewState = 'running' | '';\n\n@Injectable()\nexport class OidcSecurityCommon {\n    private storage_auth_result = 'authorizationResult';\n\n    public get authResult(): any {\n        return this.retrieve(this.storage_auth_result);\n    }\n\n    public set authResult(value: any) {\n        this.store(this.storage_auth_result, value);\n    }\n\n    private storage_access_token = 'authorizationData';\n\n    public get accessToken(): string {\n        return this.retrieve(this.storage_access_token) || '';\n    }\n\n    public set accessToken(value: string) {\n        this.store(this.storage_access_token, value);\n    }\n\n    private storage_id_token = 'authorizationDataIdToken';\n\n    public get idToken(): string {\n        return this.retrieve(this.storage_id_token) || '';\n    }\n\n    public set idToken(value: string) {\n        this.store(this.storage_id_token, value);\n    }\n\n    private storage_is_authorized = '_isAuthorized';\n\n    public get isAuthorized(): boolean | undefined {\n        return this.retrieve(this.storage_is_authorized);\n    }\n\n    public set isAuthorized(value: boolean | undefined) {\n        this.store(this.storage_is_authorized, value);\n    }\n\n    private storage_user_data = 'userData';\n\n    public get userData(): any {\n        return this.retrieve(this.storage_user_data);\n    }\n\n    public set userData(value: any) {\n        this.store(this.storage_user_data, value);\n    }\n\n    private storage_auth_nonce = 'authNonce';\n\n    public get authNonce(): string {\n        return this.retrieve(this.storage_auth_nonce) || '';\n    }\n\n    public set authNonce(value: string) {\n        this.store(this.storage_auth_nonce, value);\n    }\n\n    private storage_code_verifier = 'code_verifier';\n\n    public get code_verifier(): string {\n        return this.retrieve(this.storage_code_verifier) || '';\n    }\n\n    public set code_verifier(value: string) {\n        this.store(this.storage_code_verifier, value);\n    }\n\n    private storage_auth_state_control = 'authStateControl';\n\n    public get authStateControl(): string {\n        return this.retrieve(this.storage_auth_state_control) || '';\n    }\n\n    public set authStateControl(value: string) {\n        this.store(this.storage_auth_state_control, value);\n    }\n\n    private storage_session_state = 'session_state';\n\n    public get sessionState(): any {\n        return this.retrieve(this.storage_session_state);\n    }\n\n    public set sessionState(value: any) {\n        this.store(this.storage_session_state, value);\n    }\n\n    private storage_silent_renew_running = 'storage_silent_renew_running';\n\n    public get silentRenewRunning(): SilentRenewState {\n        return this.retrieve(this.storage_silent_renew_running) || '';\n    }\n\n    public set silentRenewRunning(value: SilentRenewState) {\n        this.store(this.storage_silent_renew_running, value);\n    }\n\n    private storage_custom_request_params = 'storage_custom_request_params';\n\n    public get customRequestParams(): {\n        [key: string]: string | number | boolean;\n    } {\n        return this.retrieve(this.storage_custom_request_params);\n    }\n\n    public set customRequestParams(value: { [key: string]: string | number | boolean }) {\n        this.store(this.storage_custom_request_params, value);\n    }\n\n    constructor(private oidcSecurityStorage: OidcSecurityStorage) {}\n\n    private retrieve(key: string): any {\n        return this.oidcSecurityStorage.read(key);\n    }\n\n    private store(key: string, value: any) {\n        this.oidcSecurityStorage.write(key, value);\n    }\n\n    resetStorageData(isRenewProcess: boolean) {\n        if (!isRenewProcess) {\n            this.store(this.storage_auth_result, '');\n            this.store(this.storage_session_state, '');\n            this.store(this.storage_silent_renew_running, '');\n            this.store(this.storage_is_authorized, false);\n            this.store(this.storage_access_token, '');\n            this.store(this.storage_id_token, '');\n            this.store(this.storage_user_data, '');\n            this.store(this.storage_code_verifier, '');\n        }\n    }\n\n    getAccessToken(): any {\n        return this.retrieve(this.storage_access_token);\n    }\n\n    getIdToken(): any {\n        return this.retrieve(this.storage_id_token);\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { hextob64u, KEYUTIL, KJUR } from 'jsrsasign';\nimport { EqualityHelperService } from './oidc-equality-helper.service';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\n\n// http://openid.net/specs/openid-connect-implicit-1_0.html\n\n// id_token\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n// MUST exactly match the value of the iss (issuer) Claim.\n//\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n// or if it contains additional audiences not trusted by the Client.\n//\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\n//\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n//\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n//\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0\n// [OpenID.Core] specification.\n//\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\n// for clock skew).\n//\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n//\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\n// is Client specific.\n//\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\n// The meaning and processing of acr Claim Values is out of scope for this document.\n//\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\n// if it determines too much time has elapsed since the last End- User authentication.\n\n// Access Token Validation\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\n\n@Injectable()\nexport class OidcSecurityValidation {\n    constructor(\n        private arrayHelperService: EqualityHelperService,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService\n    ) {}\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\n    isTokenExpired(token: string, offsetSeconds?: number): boolean {\n        let decoded: any;\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\n\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\n    }\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account for clock skew).\n    validate_id_token_exp_not_expired(decoded_id_token: string, offsetSeconds?: number): boolean {\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decoded_id_token);\n        offsetSeconds = offsetSeconds || 0;\n\n        if (!tokenExpirationDate) {\n            return false;\n        }\n\n        const tokenExpirationValue = tokenExpirationDate.valueOf();\n        const nowWithOffset = new Date().valueOf() + offsetSeconds * 1000;\n        const tokenNotExpired = tokenExpirationValue > nowWithOffset;\n\n        this.loggerService.logDebug(`Token not expired?: ${tokenExpirationValue} > ${nowWithOffset}  (${tokenNotExpired})`);\n\n        // Token not expired?\n        return tokenNotExpired;\n    }\n\n    // iss\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the https scheme that contains scheme, host,\n    // and optionally, port number and path components and no query or fragment components.\n    //\n    // sub\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\n    //\n    // aud\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value.\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\n    //\n    // exp\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until the date/ time.\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\n    //\n    // iat\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured\n    // in UTC until the date/ time.\n    validate_required_id_token(dataIdToken: any): boolean {\n        let validated = true;\n        if (!dataIdToken.hasOwnProperty('iss')) {\n            validated = false;\n            this.loggerService.logWarning('iss is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('sub')) {\n            validated = false;\n            this.loggerService.logWarning('sub is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('aud')) {\n            validated = false;\n            this.loggerService.logWarning('aud is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            validated = false;\n            this.loggerService.logWarning('exp is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            validated = false;\n            this.loggerService.logWarning('iat is missing, this is required in the id_token');\n        }\n\n        return validated;\n    }\n\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n    validate_id_token_iat_max_offset(dataIdToken: any,\n        max_offset_allowed_in_seconds: number,\n        disable_iat_offset_validation: boolean): boolean {\n\n        if (disable_iat_offset_validation) {\n            return true;\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            return false;\n        }\n\n        const dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\n\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\n\n        if (dateTime_iat_id_token == null) {\n            return false;\n        }\n\n        this.loggerService.logDebug(\n            'validate_id_token_iat_max_offset: ' +\n                (new Date().valueOf() - dateTime_iat_id_token.valueOf()) +\n                ' < ' +\n                max_offset_allowed_in_seconds * 1000\n        );\n        return new Date().valueOf() - dateTime_iat_id_token.valueOf() < max_offset_allowed_in_seconds * 1000;\n    }\n\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\n    // The precise method for detecting replay attacks is Client specific.\n    validate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\n        if (dataIdToken.nonce !== local_nonce) {\n            this.loggerService.logDebug('Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + local_nonce);\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n    // MUST exactly match the value of the iss (issuer) Claim.\n    validate_id_token_iss(dataIdToken: any, authWellKnownEndpoints_issuer: any): boolean {\n        if ((dataIdToken.iss as string) !== (authWellKnownEndpoints_issuer as string)) {\n            this.loggerService.logDebug(\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\n                    dataIdToken.iss +\n                    ' authWellKnownEndpoints issuer:' +\n                    authWellKnownEndpoints_issuer\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n    // by the iss (issuer) Claim as an audience.\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\n    // not trusted by the Client.\n    validate_id_token_aud(dataIdToken: any, aud: any): boolean {\n        if (dataIdToken.aud instanceof Array) {\n            const result = this.arrayHelperService.areEqual(dataIdToken.aud, aud);\n\n            if (!result) {\n                this.loggerService.logDebug('Validate_id_token_aud  array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n                return false;\n            }\n\n            return true;\n        } else if (dataIdToken.aud !== aud) {\n            this.loggerService.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    validateStateFromHashCallback(state: any, local_state: any): boolean {\n        if ((state as string) !== (local_state as string)) {\n            this.loggerService.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + local_state);\n            return false;\n        }\n\n        return true;\n    }\n\n    validate_userdata_sub_id_token(id_token_sub: any, userdata_sub: any): boolean {\n        if ((id_token_sub as string) !== (userdata_sub as string)) {\n            this.loggerService.logDebug('validate_userdata_sub_id_token failed, id_token_sub: ' + id_token_sub + ' userdata_sub:' + userdata_sub);\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\n    validate_signature_id_token(id_token: any, jwtkeys: any): boolean {\n        if (!jwtkeys || !jwtkeys.keys) {\n            return false;\n        }\n\n        const header_data = this.tokenHelperService.getHeaderFromToken(id_token, false);\n\n        if (Object.keys(header_data).length === 0 && header_data.constructor === Object) {\n            this.loggerService.logWarning('id token has no header data');\n            return false;\n        }\n\n        const kid = header_data.kid;\n        const alg = header_data.alg;\n\n        if ('RS256' !== (alg as string)) {\n            this.loggerService.logWarning('Only RS256 supported');\n            return false;\n        }\n\n        let isValid = false;\n\n        if (!header_data.hasOwnProperty('kid')) {\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\n            // kty\t\"RSA\" use \"sig\"\n            let amountOfMatchingKeys = 0;\n            for (const key of jwtkeys.keys) {\n                if ((key.kty as string) === 'RSA' && (key.use as string) === 'sig') {\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\n                }\n            }\n\n            if (amountOfMatchingKeys === 0) {\n                this.loggerService.logWarning('no keys found, incorrect Signature, validation failed for id_token');\n                return false;\n            } else if (amountOfMatchingKeys > 1) {\n                this.loggerService.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\n                return false;\n            } else {\n                for (const key of jwtkeys.keys) {\n                    if ((key.kty as string) === 'RSA' && (key.use as string) === 'sig') {\n                        const publickey = KEYUTIL.getKey(key);\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\n                        if (!isValid) {\n                            this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                        }\n                        return isValid;\n                    }\n                }\n            }\n        } else {\n            // kid in the Jose header of id_token\n            for (const key of jwtkeys.keys) {\n                if ((key.kid as string) === (kid as string)) {\n                    const publickey = KEYUTIL.getKey(key);\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\n                    if (!isValid) {\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                    }\n                    return isValid;\n                }\n            }\n        }\n\n        return isValid;\n    }\n\n    config_validate_response_type(response_type: string): boolean {\n        if (response_type === 'id_token token' || response_type === 'id_token') {\n            return true;\n        }\n\n        if (response_type === 'code') {\n            return true;\n        }\n\n        this.loggerService.logWarning('module configure incorrect, invalid response_type:' + response_type);\n        return false;\n    }\n\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\n    ////    if (!header_data.hasOwnProperty('kid')) {\n    ////        // no kid defined in Jose header\n    ////        if (jwtkeys.keys.length != 1) {\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\n    ////            return false;\n    ////        }\n    ////    }\n\n    ////    return true;\n    //// }\n\n    // Access Token Validation\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\n    // is present in the ID Token.\n    validate_id_token_at_hash(access_token: any, at_hash: any, isCodeFlow: boolean): boolean {\n        this.loggerService.logDebug('at_hash from the server:' + at_hash);\n\n        // The at_hash is optional for the code flow\n        if (isCodeFlow) {\n            if (!(at_hash as string)) {\n                this.loggerService.logDebug('Code Flow active, and no at_hash in the id_token, skipping check!');\n                return true;\n            }\n        }\n\n        const testdata = this.generate_at_hash('' + access_token);\n        this.loggerService.logDebug('at_hash client validation not decoded:' + testdata);\n        if (testdata === (at_hash as string)) {\n            return true; // isValid;\n        } else {\n            const testValue = this.generate_at_hash('' + decodeURIComponent(access_token));\n            this.loggerService.logDebug('-gen access--' + testValue);\n            if (testValue === (at_hash as string)) {\n                return true; // isValid\n            }\n        }\n\n        return false;\n    }\n\n    private generate_at_hash(access_token: any): string {\n        const hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\n        const first128bits = hash.substr(0, hash.length / 2);\n        const testdata = hextob64u(first128bits);\n\n        return testdata;\n    }\n\n    generate_code_verifier(code_challenge: any): string {\n        const hash = KJUR.crypto.Util.hashString(code_challenge, 'sha256');\n        const testdata = hextob64u(hash);\n\n        return testdata;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport { ValidationResult } from '../models/validation-result.enum';\nimport { AuthConfiguration } from '../modules/auth.configuration';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecurityValidation } from './oidc.security.validation';\n\n@Injectable()\nexport class StateValidationService {\n    private authWellKnownEndpoints = new AuthWellKnownEndpoints();\n    constructor(\n        private authConfiguration: AuthConfiguration,\n        public oidcSecurityCommon: OidcSecurityCommon,\n        private oidcSecurityValidation: OidcSecurityValidation,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService\n    ) {}\n\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n\n    validateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\n        const toReturn = new ValidateStateResult();\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.authStateControl)) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            toReturn.state = ValidationResult.StatesDoNotMatch;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (this.authConfiguration.response_type === 'id_token token' || this.authConfiguration.response_type === 'code') {\n            toReturn.access_token = result.access_token;\n        }\n\n        toReturn.id_token = result.id_token;\n\n        toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(toReturn.id_token, false);\n\n        if (!this.oidcSecurityValidation.validate_signature_id_token(toReturn.id_token, jwtKeys)) {\n            this.loggerService.logDebug('authorizedCallback Signature validation failed id_token');\n            toReturn.state = ValidationResult.SignatureFailed;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (!this.oidcSecurityValidation.validate_id_token_nonce(toReturn.decoded_id_token, this.oidcSecurityCommon.authNonce)) {\n            this.loggerService.logWarning('authorizedCallback incorrect nonce');\n            toReturn.state = ValidationResult.IncorrectNonce;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (!this.oidcSecurityValidation.validate_required_id_token(toReturn.decoded_id_token)) {\n            this.loggerService.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\n            toReturn.state = ValidationResult.RequiredPropertyMissing;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\n                toReturn.decoded_id_token,\n                this.authConfiguration.max_id_token_iat_offset_allowed_in_seconds,\n                this.authConfiguration.disable_iat_offset_validation\n            )\n        ) {\n            this.loggerService.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\n            toReturn.state = ValidationResult.MaxOffsetExpired;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (this.authWellKnownEndpoints) {\n            if (this.authConfiguration.iss_validation_off) {\n                this.loggerService.logDebug('iss validation is turned off, this is not recommended!');\n            } else if (!this.authConfiguration.iss_validation_off &&\n                !this.oidcSecurityValidation.validate_id_token_iss(toReturn.decoded_id_token, this.authWellKnownEndpoints.issuer)) {\n                this.loggerService.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\n                toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n        } else {\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n            toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (!this.oidcSecurityValidation.validate_id_token_aud(toReturn.decoded_id_token, this.authConfiguration.client_id)) {\n            this.loggerService.logWarning('authorizedCallback incorrect aud');\n            toReturn.state = ValidationResult.IncorrectAud;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (!this.oidcSecurityValidation.validate_id_token_exp_not_expired(toReturn.decoded_id_token)) {\n            this.loggerService.logWarning('authorizedCallback token expired');\n            toReturn.state = ValidationResult.TokenExpired;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        // flow id_token token\n        if (this.authConfiguration.response_type !== 'id_token token' && this.authConfiguration.response_type !== 'code') {\n            toReturn.authResponseIsValid = true;\n            toReturn.state = ValidationResult.Ok;\n            this.handleSuccessfulValidation();\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (!this.oidcSecurityValidation.validate_id_token_at_hash(toReturn.access_token,\n            toReturn.decoded_id_token.at_hash,\n            this.authConfiguration.response_type === 'code') ||\n            !toReturn.access_token\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect at_hash');\n            toReturn.state = ValidationResult.IncorrectAtHash;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        toReturn.authResponseIsValid = true;\n        toReturn.state = ValidationResult.Ok;\n        this.handleSuccessfulValidation();\n        return toReturn;\n    }\n\n    private handleSuccessfulValidation() {\n        this.oidcSecurityCommon.authNonce = '';\n\n        if (this.authConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.loggerService.logDebug('AuthorizedCallback token(s) validated, continue');\n    }\n\n    private handleUnsuccessfulValidation() {\n        this.oidcSecurityCommon.authNonce = '';\n\n        if (this.authConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.loggerService.logDebug('AuthorizedCallback token(s) invalid');\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { from, Observable, Observer, Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nimport { AuthConfiguration } from '../modules/auth.configuration';\nimport { IFrameService } from './existing-iframe.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { OidcSecurityCommon } from './oidc.security.common';\n\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\n\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\n\n@Injectable()\nexport class OidcSecurityCheckSession {\n    private sessionIframe: any;\n    private iframeMessageEvent: any;\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\n    private scheduledHeartBeat: any;\n    private lastIFrameRefresh = 0;\n    private outstandingMessages = 0;\n    private heartBeatInterval = 3000;\n    private iframeRefreshInterval = 60000;\n    private _onCheckSessionChanged = new Subject<any>();\n\n    public get onCheckSessionChanged(): Observable<any> {\n        return this._onCheckSessionChanged.asObservable();\n    }\n\n    constructor(\n        private authConfiguration: AuthConfiguration,\n        private oidcSecurityCommon: OidcSecurityCommon,\n        private loggerService: LoggerService,\n        private iFrameService: IFrameService,\n        private zone: NgZone\n    ) {}\n\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n\n    private doesSessionExist(): boolean {\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n\n        if (!existingIFrame) {\n            return false;\n        }\n\n        this.sessionIframe = existingIFrame;\n        return true;\n    }\n\n    private init() {\n        if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\n            return from([this]);\n        }\n\n        if (!this.doesSessionExist()) {\n            this.sessionIframe = this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n            this.iframeMessageEvent = this.messageHandler.bind(this);\n            window.addEventListener('message', this.iframeMessageEvent, false);\n        }\n\n        if (this.authWellKnownEndpoints) {\n            this.sessionIframe.contentWindow.location.replace(this.authWellKnownEndpoints.check_session_iframe);\n        } else {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\n        }\n\n        return Observable.create((observer: Observer<OidcSecurityCheckSession>) => {\n            this.sessionIframe.onload = () => {\n                this.lastIFrameRefresh = Date.now();\n                observer.next(this);\n                observer.complete();\n            };\n        });\n    }\n\n    startCheckingSession(clientId: string): void {\n        if (this.scheduledHeartBeat) {\n            return;\n        }\n\n        this.pollServerSession(clientId);\n    }\n\n    stopCheckingSession(): void {\n        if (!this.scheduledHeartBeat) {\n            return;\n        }\n\n        this.clearScheduledHeartBeat();\n    }\n\n    private pollServerSession(clientId: string) {\n        const _pollServerSessionRecur = () => {\n            this.init()\n                .pipe(take(1))\n                .subscribe(() => {\n                    if (this.sessionIframe && clientId) {\n                        this.loggerService.logDebug(this.sessionIframe);\n                        const session_state = this.oidcSecurityCommon.sessionState;\n                        if (session_state) {\n                            this.outstandingMessages++;\n                            this.sessionIframe.contentWindow.postMessage(clientId + ' ' + session_state, this.authConfiguration.stsServer);\n                        } else {\n                            this.loggerService.logDebug('OidcSecurityCheckSession pollServerSession session_state is blank');\n                            this._onCheckSessionChanged.next();\n                        }\n                    } else {\n                        this.loggerService.logWarning('OidcSecurityCheckSession pollServerSession sessionIframe does not exist');\n                        this.loggerService.logDebug(clientId);\n                        this.loggerService.logDebug(this.sessionIframe);\n                        // this.init();\n                    }\n\n                    // after sending three messages with no response, fail.\n                    if (this.outstandingMessages > 3) {\n                        this.loggerService.logError(\n                            `OidcSecurityCheckSession not receiving check session response messages. Outstanding messages: ${\n                                this.outstandingMessages\n                            }. Server unreachable?`\n                        );\n                        this._onCheckSessionChanged.next();\n                    }\n\n                    this.scheduledHeartBeat = setTimeout(_pollServerSessionRecur, this.heartBeatInterval);\n                });\n        };\n\n        this.outstandingMessages = 0;\n\n        this.zone.runOutsideAngular(() => {\n            this.scheduledHeartBeat = setTimeout(_pollServerSessionRecur, this.heartBeatInterval);\n        });\n    }\n    private clearScheduledHeartBeat() {\n        clearTimeout(this.scheduledHeartBeat);\n        this.scheduledHeartBeat = null;\n    }\n\n    private messageHandler(e: any) {\n        this.outstandingMessages = 0;\n        if (this.sessionIframe && e.origin === this.authConfiguration.stsServer && e.source === this.sessionIframe.contentWindow) {\n            if (e.data === 'error') {\n                this.loggerService.logWarning('error from checksession messageHandler');\n            } else if (e.data === 'changed') {\n                this._onCheckSessionChanged.next();\n            } else {\n                this.loggerService.logDebug(e.data + ' from checksession messageHandler');\n            }\n        }\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, Subject } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable()\nexport class OidcConfigService {\n    private _onConfigurationLoaded = new Subject<boolean>();\n    clientConfiguration: any;\n    wellKnownEndpoints: any;\n\n    public get onConfigurationLoaded(): Observable<boolean> {\n        return this._onConfigurationLoaded.asObservable();\n    }\n\n    constructor(private readonly httpClient: HttpClient) {}\n\n    load(configUrl: string) {\n        this.httpClient\n            .get(configUrl)\n            .pipe(\n                map(response => {\n                    this.clientConfiguration = response;\n                    this.load_using_stsServer(this.clientConfiguration.stsServer);\n                }),\n                catchError(error => {\n                    console.error(`OidcConfigService 'load' threw an error on calling ${configUrl}`, error);\n                    this._onConfigurationLoaded.next(false);\n                    return of(false);\n                })\n            )\n            .subscribe();\n    }\n\n    load_using_stsServer(stsServer: string) {\n        const url = `${stsServer}/.well-known/openid-configuration`;\n\n        this.httpClient\n            .get(url)\n            .pipe(\n                map(response => {\n                    this.wellKnownEndpoints = response;\n                    this._onConfigurationLoaded.next(true);\n                }),\n                catchError(error => {\n                    console.error(`OidcConfigService 'load_using_stsServer' threw an error on calling ${stsServer}`, error);\n                    this._onConfigurationLoaded.next(false);\n                    return of(false);\n                })\n            )\n            .subscribe();\n    }\n\n    load_using_custom_stsServer(url: string) {\n        this.httpClient\n            .get(url)\n            .pipe(\n                map(response => {\n                    this.wellKnownEndpoints = response;\n                    this._onConfigurationLoaded.next(true);\n                }),\n                catchError(error => {\n                    console.error(`OidcConfigService 'load_using_custom_stsServer' threw an error on calling ${url}`, error);\n                    this._onConfigurationLoaded.next(false);\n                    return of(false);\n                })\n            )\n            .subscribe();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { IFrameService } from './existing-iframe.service';\nimport { LoggerService } from './oidc.logger.service';\n\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\n\n@Injectable()\nexport class OidcSecuritySilentRenew {\n    private sessionIframe: any;\n    private isRenewInitialized = false;\n\n    constructor(private loggerService: LoggerService, private iFrameService: IFrameService) {}\n\n    initRenew() {\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n\n        if (!existingIFrame) {\n            this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n        }\n\n        this.isRenewInitialized = true;\n    }\n\n    startRenew(url: string): Observable<any> {\n        if (!this.isRenewInitialized) {\n            this.initRenew();\n        }\n\n        this.sessionIframe = this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n\n        this.loggerService.logDebug('startRenew for URL:' + url);\n        this.sessionIframe.contentWindow.location.replace(url);\n\n        return Observable.create((observer: Observer<any>) => {\n            this.sessionIframe.onload = () => {\n                observer.next(this);\n                observer.complete();\n            };\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OidcDataService } from '../data-services/oidc-data.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nimport { LoggerService } from './oidc.logger.service';\nimport { OidcSecurityCommon } from './oidc.security.common';\n\n@Injectable()\nexport class OidcSecurityUserService {\n    private userData: any = '';\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\n\n    constructor(private oidcDataService: OidcDataService, private oidcSecurityCommon: OidcSecurityCommon, private loggerService: LoggerService) {}\n\n    setupModule(authWellKnownEndpoints: AuthWellKnownEndpoints) {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n    }\n\n    initUserData() {\n        return this.getIdentityUserData().pipe(map((data: any) => (this.userData = data)));\n    }\n\n    getUserData(): any {\n        if (!this.userData) {\n            throw Error('UserData is not set!');\n        }\n\n        return this.userData;\n    }\n\n    setUserData(value: any): void {\n        this.userData = value;\n    }\n\n    private getIdentityUserData(): Observable<any> {\n        const token = this.oidcSecurityCommon.getAccessToken();\n\n        if (!this.authWellKnownEndpoints) {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\n\n            throw Error('authWellKnownEndpoints is undefined');\n        }\n\n        const canGetUserData = this.authWellKnownEndpoints && this.authWellKnownEndpoints.userinfo_endpoint;\n\n        if (!canGetUserData) {\n            this.loggerService.logError(\n                'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\n            );\n            throw Error('authWellKnownEndpoints.userinfo_endpoint is undefined');\n        }\n\n        return this.oidcDataService.getIdentityUserData(this.authWellKnownEndpoints.userinfo_endpoint, token);\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n    encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    decodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n\n    decodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n","import { HttpParams, HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, from, Observable, Subject, throwError as observableThrowError, timer, of } from 'rxjs';\nimport { catchError, filter, map, race, shareReplay, switchMap, switchMapTo, take, tap } from 'rxjs/operators';\nimport { OidcDataService } from '../data-services/oidc-data.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nimport { AuthorizationResult } from '../models/authorization-result';\nimport { AuthorizationState } from '../models/authorization-state.enum';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport { ValidationResult } from '../models/validation-result.enum';\nimport { AuthConfiguration, OpenIDImplicitFlowConfiguration } from '../modules/auth.configuration';\nimport { StateValidationService } from './oidc-security-state-validation.service';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\nimport { OidcSecurityUserService } from './oidc.security.user-service';\nimport { OidcSecurityValidation } from './oidc.security.validation';\nimport { UriEncoder } from './uri-encoder';\n\n@Injectable()\nexport class OidcSecurityService {\n    private _onModuleSetup = new Subject<boolean>();\n    private _onCheckSessionChanged = new Subject<boolean>();\n    private _onAuthorizationResult = new Subject<AuthorizationResult>();\n\n    public get onModuleSetup(): Observable<boolean> {\n        return this._onModuleSetup.asObservable();\n    }\n\n    public get onAuthorizationResult(): Observable<AuthorizationResult> {\n        return this._onAuthorizationResult.asObservable();\n    }\n\n    public get onCheckSessionChanged(): Observable<boolean> {\n        return this._onCheckSessionChanged.asObservable();\n    }\n\n    public get onConfigurationChange(): Observable<OpenIDImplicitFlowConfiguration> {\n        return this.authConfiguration.onConfigurationChange;\n    }\n\n    checkSessionChanged = false;\n    moduleSetup = false;\n\n    private _isModuleSetup = new BehaviorSubject<boolean>(false);\n\n    private authWellKnownEndpoints: AuthWellKnownEndpoints | undefined;\n    private _isAuthorized = new BehaviorSubject<boolean>(false);\n    private _isSetupAndAuthorized: Observable<boolean>;\n\n    private _userData = new BehaviorSubject<any>('');\n    private authWellKnownEndpointsLoaded = false;\n    private runTokenValidationRunning = false;\n    private _scheduledHeartBeat: any;\n    private boundSilentRenewEvent: any;\n\n    constructor(\n        private oidcDataService: OidcDataService,\n        private stateValidationService: StateValidationService,\n        private authConfiguration: AuthConfiguration,\n        private router: Router,\n        private oidcSecurityCheckSession: OidcSecurityCheckSession,\n        private oidcSecuritySilentRenew: OidcSecuritySilentRenew,\n        private oidcSecurityUserService: OidcSecurityUserService,\n        private oidcSecurityCommon: OidcSecurityCommon,\n        private oidcSecurityValidation: OidcSecurityValidation,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService,\n        private zone: NgZone,\n        private readonly httpClient: HttpClient\n    ) {\n        this.onModuleSetup.pipe(take(1)).subscribe(() => {\n            this.moduleSetup = true;\n            this._isModuleSetup.next(true);\n        });\n\n        this._isSetupAndAuthorized = this._isModuleSetup.pipe(\n            filter((isModuleSetup: boolean) => isModuleSetup),\n            switchMap(() => {\n                if (!this.authConfiguration.silent_renew) {\n                    return from([true]).pipe(tap(() => this.loggerService.logDebug(`IsAuthorizedRace: Silent Renew Not Active. Emitting.`)));\n                }\n\n                const race$ = this._isAuthorized.asObservable().pipe(\n                    filter((isAuthorized: boolean) => isAuthorized),\n                    take(1),\n                    tap(() => this.loggerService.logDebug('IsAuthorizedRace: Existing token is still authorized.')),\n                    race(\n                        this._onAuthorizationResult.pipe(\n                            take(1),\n                            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Silent Renew Refresh Session Complete')),\n                            map(() => true)\n                        ),\n                        timer(5000).pipe(\n                            // backup, if nothing happens after 5 seconds stop waiting and emit\n                            tap(() => {\n                                this.resetAuthorizationData(false);\n                                this.oidcSecurityCommon.authNonce = '';\n                                this.loggerService.logWarning('IsAuthorizedRace: Timeout reached. Emitting.');\n                            }),\n                            map(() => true)\n                        )\n                    )\n                );\n\n                this.loggerService.logDebug('Silent Renew is active, check if token in storage is active');\n                if (this.oidcSecurityCommon.authNonce === '' || this.oidcSecurityCommon.authNonce === undefined) {\n                    // login not running, or a second silent renew, user must login first before this will work.\n                    this.loggerService.logDebug('Silent Renew or login not running, try to refresh the session');\n                    this.refreshSession();\n                }\n\n                return race$;\n            }),\n            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Completed')),\n            switchMapTo(this._isAuthorized.asObservable()),\n            tap((isAuthorized: boolean) => this.loggerService.logDebug(`getIsAuthorized: ${isAuthorized}`)),\n            shareReplay(1)\n        );\n\n        this._isSetupAndAuthorized.pipe(filter(() => this.authConfiguration.start_checksession)).subscribe(isSetupAndAuthorized => {\n            if (isSetupAndAuthorized) {\n                this.oidcSecurityCheckSession.startCheckingSession(this.authConfiguration.client_id);\n            } else {\n                this.oidcSecurityCheckSession.stopCheckingSession();\n            }\n        });\n    }\n\n    setupModule(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration, authWellKnownEndpoints: AuthWellKnownEndpoints): void {\n        this.authWellKnownEndpoints = Object.assign({}, authWellKnownEndpoints);\n        this.authConfiguration.init(openIDImplicitFlowConfiguration);\n        this.stateValidationService.setupModule(authWellKnownEndpoints);\n        this.oidcSecurityCheckSession.setupModule(authWellKnownEndpoints);\n        this.oidcSecurityUserService.setupModule(authWellKnownEndpoints);\n\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\n            this.loggerService.logDebug('onCheckSessionChanged');\n            this.checkSessionChanged = true;\n            this._onCheckSessionChanged.next(this.checkSessionChanged);\n        });\n\n        const userData = this.oidcSecurityCommon.userData;\n        if (userData) {\n            this.setUserData(userData);\n        }\n\n        const isAuthorized = this.oidcSecurityCommon.isAuthorized;\n        if (isAuthorized) {\n            this.loggerService.logDebug('IsAuthorized setup module');\n            this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\n            if (this.oidcSecurityValidation.isTokenExpired(this.oidcSecurityCommon.idToken, this.authConfiguration.silent_renew_offset_in_seconds)) {\n                this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\n            } else {\n                this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\n                this.setIsAuthorized(isAuthorized);\n            }\n            this.runTokenValidation();\n        }\n\n        this.loggerService.logDebug('STS server: ' + this.authConfiguration.stsServer);\n\n        this._onModuleSetup.next();\n\n        if (this.authConfiguration.silent_renew) {\n            this.oidcSecuritySilentRenew.initRenew();\n\n            // Support authorization via DOM events.\n            // Deregister if OidcSecurityService.setupModule is called again by any instance.\n            //      We only ever want the latest setup service to be reacting to this event.\n            this.boundSilentRenewEvent = this.silentRenewEventHandler.bind(this);\n\n            const instanceId = Math.random();\n\n            const boundSilentRenewInitEvent = ((e: CustomEvent) => {\n                if (e.detail !== instanceId) {\n                    window.removeEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent);\n                    window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent);\n                }\n            }).bind(this);\n\n            window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent, false);\n            window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\n\n            window.dispatchEvent(\n                new CustomEvent('oidc-silent-renew-init', {\n                    detail: instanceId,\n                })\n            );\n        }\n    }\n\n    getUserData(): Observable<any> {\n        return this._userData.asObservable();\n    }\n\n    getIsModuleSetup(): Observable<boolean> {\n        return this._isModuleSetup.asObservable();\n    }\n\n    getIsAuthorized(): Observable<boolean> {\n        return this._isSetupAndAuthorized;\n    }\n\n    getToken(): string {\n        if (!this._isAuthorized.getValue()) {\n            return '';\n        }\n\n        const token = this.oidcSecurityCommon.getAccessToken();\n        return decodeURIComponent(token);\n    }\n\n    getIdToken(): string {\n        if (!this._isAuthorized.getValue()) {\n            return '';\n        }\n\n        const token = this.oidcSecurityCommon.getIdToken();\n        return decodeURIComponent(token);\n    }\n\n    getPayloadFromIdToken(encode = false): any {\n        const token = this.getIdToken();\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\n    }\n\n    setState(state: string): void {\n        this.oidcSecurityCommon.authStateControl = state;\n    }\n\n    getState(): string {\n        return this.oidcSecurityCommon.authStateControl;\n    }\n\n    setCustomRequestParameters(params: { [key: string]: string | number | boolean }) {\n        this.oidcSecurityCommon.customRequestParams = params;\n    }\n\n    // Code Flow with PCKE or Implicit Flow\n    authorize(urlHandler?: (url: string) => any) {\n        if (this.authWellKnownEndpoints) {\n            this.authWellKnownEndpointsLoaded = true;\n        }\n\n        if (!this.authWellKnownEndpointsLoaded) {\n            this.loggerService.logError('Well known endpoints must be loaded before user can login!');\n            return;\n        }\n\n        if (!this.oidcSecurityValidation.config_validate_response_type(this.authConfiguration.response_type)) {\n            // invalid response_type\n            return;\n        }\n\n        this.resetAuthorizationData(false);\n\n        this.loggerService.logDebug('BEGIN Authorize Code Flow, no auth data');\n\n        let state = this.oidcSecurityCommon.authStateControl;\n        if (!state) {\n            state = Date.now() + '' + Math.random() + Math.random();\n            this.oidcSecurityCommon.authStateControl = state;\n        }\n\n        const nonce = 'N' + Math.random() + '' + Date.now();\n        this.oidcSecurityCommon.authNonce = nonce;\n        this.loggerService.logDebug('AuthorizedController created. local state: ' + this.oidcSecurityCommon.authStateControl);\n\n        let url = '';\n        // Code Flow\n        if (this.authConfiguration.response_type === 'code') {\n\n            // code_challenge with \"S256\"\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\n\n            this.oidcSecurityCommon.code_verifier = code_verifier;\n\n            if (this.authWellKnownEndpoints) {\n                url = this.createAuthorizeUrl(true, code_challenge,\n                    this.authConfiguration.redirect_url,\n                    nonce,\n                    state,\n                    this.authWellKnownEndpoints.authorization_endpoint\n                );\n            } else {\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\n            }\n        } else { // Implicit Flow\n\n            if (this.authWellKnownEndpoints) {\n                url = this.createAuthorizeUrl(false, '',\n                    this.authConfiguration.redirect_url,\n                    nonce,\n                    state,\n                    this.authWellKnownEndpoints.authorization_endpoint\n                );\n            } else {\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\n            }\n        }\n\n        if (urlHandler) {\n            urlHandler(url);\n        } else {\n            this.redirectTo(url);\n        }\n    }\n\n    // Code Flow\n    authorizedCallbackWithCode(urlToCheck: string) {\n        const urlParts = urlToCheck.split('?');\n        const params = new HttpParams({\n            fromString: urlParts[1]\n        });\n        const code = params.get('code');\n        const state = params.get('state');\n        const session_state = params.get('session_state');\n\n        if (code && state) {\n            this.requestTokensWithCode(code, state, session_state);\n        }\n    }\n\n    // Code Flow\n    requestTokensWithCode(code: string, state: string, session_state: string | null) {\n        this._isModuleSetup\n            .pipe(\n                filter((isModuleSetup: boolean) => isModuleSetup),\n                take(1)\n            )\n            .subscribe(() => {\n                this.requestTokensWithCodeProcedure(code, state, session_state);\n            });\n    }\n\n    // Code Flow with PCKE\n    requestTokensWithCodeProcedure(code: string, state: string, session_state: string | null) {\n        let tokenRequestUrl = '';\n        if (this.authWellKnownEndpoints && this.authWellKnownEndpoints.token_endpoint) {\n            tokenRequestUrl = `${this.authWellKnownEndpoints.token_endpoint}`;\n        }\n\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(state, this.oidcSecurityCommon.authStateControl)) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            // ValidationResult.StatesDoNotMatch;\n            return;\n        }\n\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        let data = `grant_type=authorization_code&client_id=${this.authConfiguration.client_id}`\n            + `&code_verifier=${this.oidcSecurityCommon.code_verifier}&code=${code}&redirect_uri=${this.authConfiguration.redirect_url}`;\n        if (this.oidcSecurityCommon.silentRenewRunning === 'running') {\n            data = `grant_type=authorization_code&client_id=${this.authConfiguration.client_id}`\n                + `&code_verifier=${this.oidcSecurityCommon.code_verifier}&code=${code}&redirect_uri=${this.authConfiguration.silent_redirect_url}`;\n        }\n\n        this.httpClient\n            .post(tokenRequestUrl, data, { headers: headers })\n            .pipe(\n            map(response => {\n                    let obj: any = new Object;\n                    obj = response;\n                    obj.state = state;\n                    obj.session_state = session_state;\n\n                    this.authorizedCodeFlowCallbackProcedure(obj);\n                }),\n            catchError(error => {\n                    this.loggerService.logError(error);\n                    this.loggerService.logError(`OidcService code request ${this.authConfiguration.stsServer}`);\n                    return of(false);\n                })\n            )\n            .subscribe();\n    }\n\n    // Code Flow\n    private authorizedCodeFlowCallbackProcedure(result: any) {\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n        const isRenewProcess = silentRenew === 'running';\n\n        this.loggerService.logDebug('BEGIN authorized Code Flow Callback, no auth data');\n        this.resetAuthorizationData(isRenewProcess);\n\n        this.authorizedCallbackProcedure(result, isRenewProcess);\n    }\n\n    // Implicit Flow\n    private authorizedImplicitFlowCallbackProcedure(hash?: string) {\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n        const isRenewProcess = silentRenew === 'running';\n\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\n        this.resetAuthorizationData(isRenewProcess);\n\n        hash = hash || window.location.hash.substr(1);\n\n        const result: any = hash.split('&').reduce(function (resultData: any, item: string) {\n            const parts = item.split('=');\n            resultData[<string>parts.shift()] = parts.join('=');\n            return resultData;\n        }, {});\n\n        this.authorizedCallbackProcedure(result, isRenewProcess);\n    }\n\n    // Implicit Flow\n    authorizedImplicitFlowCallback(hash?: string) {\n        this._isModuleSetup\n            .pipe(\n                filter((isModuleSetup: boolean) => isModuleSetup),\n                take(1)\n            )\n            .subscribe(() => {\n                this.authorizedImplicitFlowCallbackProcedure(hash);\n            });\n    }\n\n    private redirectTo(url: string) {\n        window.location.href = url;\n    }\n\n    // Implicit Flow\n    private authorizedCallbackProcedure(result: any, isRenewProcess: boolean) {\n        this.oidcSecurityCommon.authResult = result;\n\n        if (!this.authConfiguration.history_cleanup_off && !isRenewProcess) {\n            // reset the history to remove the tokens\n            window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);\n        } else {\n            this.loggerService.logDebug('history clean up inactive');\n        }\n\n        if (result.error) {\n            if (isRenewProcess) {\n                this.loggerService.logDebug(result);\n            } else {\n                this.loggerService.logWarning(result);\n            }\n\n            if ((result.error as string) === 'login_required') {\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.LoginRequired));\n            } else {\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.SecureTokenServerError));\n            }\n\n            this.resetAuthorizationData(false);\n            this.oidcSecurityCommon.authNonce = '';\n\n            if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                this.router.navigate([this.authConfiguration.unauthorized_route]);\n            }\n        } else {\n            this.loggerService.logDebug(result);\n\n            this.loggerService.logDebug('authorizedCallback created, begin token validation');\n\n            this.getSigningKeys().subscribe(\n                jwtKeys => {\n                    const validationResult = this.getValidatedStateResult(result, jwtKeys);\n\n                    if (validationResult.authResponseIsValid) {\n                        this.setAuthorizationData(validationResult.access_token, validationResult.id_token);\n                        this.oidcSecurityCommon.silentRenewRunning = '';\n\n                        if (this.authConfiguration.auto_userinfo) {\n                            this.getUserinfo(isRenewProcess, result, validationResult.id_token, validationResult.decoded_id_token).subscribe(\n                                response => {\n                                    if (response) {\n                                        this._onAuthorizationResult.next(\n                                            new AuthorizationResult(AuthorizationState.authorized, validationResult.state)\n                                        );\n                                        if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                                            this.router.navigate([this.authConfiguration.post_login_route]);\n                                        }\n                                    } else {\n                                        this._onAuthorizationResult.next(\n                                            new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state)\n                                        );\n                                        if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                                            this.router.navigate([this.authConfiguration.unauthorized_route]);\n                                        }\n                                    }\n                                },\n                                err => {\n                                    /* Something went wrong while getting signing key */\n                                    this.loggerService.logWarning('Failed to retreive user info with error: ' + JSON.stringify(err));\n                                }\n                            );\n                        } else {\n                            if (!isRenewProcess) {\n                                // userData is set to the id_token decoded, auto get user data set to false\n                                this.oidcSecurityUserService.setUserData(validationResult.decoded_id_token);\n                                this.setUserData(this.oidcSecurityUserService.getUserData());\n                            }\n\n                            this.runTokenValidation();\n\n                            this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.authorized, validationResult.state));\n                            if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                                this.router.navigate([this.authConfiguration.post_login_route]);\n                            }\n                        }\n                    } else {\n                        // something went wrong\n                        this.loggerService.logWarning('authorizedCallback, token(s) validation failed, resetting');\n                        this.loggerService.logWarning(window.location.hash);\n                        this.resetAuthorizationData(false);\n                        this.oidcSecurityCommon.silentRenewRunning = '';\n\n                        this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state));\n                        if (!this.authConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                            this.router.navigate([this.authConfiguration.unauthorized_route]);\n                        }\n                    }\n                },\n                err => {\n                    /* Something went wrong while getting signing key */\n                    this.loggerService.logWarning('Failed to retreive siging key with error: ' + JSON.stringify(err));\n                    this.oidcSecurityCommon.silentRenewRunning = '';\n                }\n            );\n        }\n    }\n\n    getUserinfo(isRenewProcess = false, result?: any, id_token?: any, decoded_id_token?: any): Observable<boolean> {\n        result = result ? result : this.oidcSecurityCommon.authResult;\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\n        decoded_id_token = decoded_id_token ? decoded_id_token : this.tokenHelperService.getPayloadFromToken(id_token, false);\n\n        return new Observable<boolean>(observer => {\n            // flow id_token token\n            if (this.authConfiguration.response_type === 'id_token token' || this.authConfiguration.response_type === 'code') {\n                if (isRenewProcess && this._userData.value) {\n                    this.oidcSecurityCommon.sessionState = result.session_state;\n                    observer.next(true);\n                    observer.complete();\n                } else {\n                    this.oidcSecurityUserService.initUserData().subscribe(() => {\n                        this.loggerService.logDebug('authorizedCallback (id_token token || code) flow');\n\n                        const userData = this.oidcSecurityUserService.getUserData();\n\n                        if (this.oidcSecurityValidation.validate_userdata_sub_id_token(decoded_id_token.sub, userData.sub)) {\n                            this.setUserData(userData);\n                            this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\n                            this.loggerService.logDebug(this.oidcSecurityUserService.getUserData());\n\n                            this.oidcSecurityCommon.sessionState = result.session_state;\n\n                            this.runTokenValidation();\n                            observer.next(true);\n                        } else {\n                            // something went wrong, userdata sub does not match that from id_token\n                            this.loggerService.logWarning('authorizedCallback, User data sub does not match sub in id_token');\n                            this.loggerService.logDebug('authorizedCallback, token(s) validation failed, resetting');\n                            this.resetAuthorizationData(false);\n                            observer.next(false);\n                        }\n                        observer.complete();\n                    });\n                }\n            } else {\n                // flow id_token\n                this.loggerService.logDebug('authorizedCallback id_token flow');\n                this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\n\n                // userData is set to the id_token decoded. No access_token.\n                this.oidcSecurityUserService.setUserData(decoded_id_token);\n                this.setUserData(this.oidcSecurityUserService.getUserData());\n\n                this.oidcSecurityCommon.sessionState = result.session_state;\n\n                this.runTokenValidation();\n\n                observer.next(true);\n                observer.complete();\n            }\n        });\n    }\n\n    logoff(urlHandler?: (url: string) => any) {\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\n\n        if (this.authWellKnownEndpoints) {\n            if (this.authWellKnownEndpoints.end_session_endpoint) {\n                const end_session_endpoint = this.authWellKnownEndpoints.end_session_endpoint;\n                const id_token_hint = this.oidcSecurityCommon.idToken;\n                const url = this.createEndSessionUrl(end_session_endpoint, id_token_hint);\n\n                this.resetAuthorizationData(false);\n\n                if (this.authConfiguration.start_checksession && this.checkSessionChanged) {\n                    this.loggerService.logDebug('only local login cleaned up, server session has changed');\n                } else if (urlHandler) {\n                    urlHandler(url);\n                } else {\n                    this.redirectTo(url);\n                }\n            } else {\n                this.resetAuthorizationData(false);\n                this.loggerService.logDebug('only local login cleaned up, no end_session_endpoint');\n            }\n        } else {\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n        }\n    }\n\n    refreshSession(): Observable<any> {\n        if (!this.authConfiguration.silent_renew) {\n            return from([false]);\n        }\n\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\n\n        let state = this.oidcSecurityCommon.authStateControl;\n        if (state === '' || state === null) {\n            state = Date.now() + '' + Math.random() + Math.random();\n            this.oidcSecurityCommon.authStateControl = state;\n        }\n\n        const nonce = 'N' + Math.random() + '' + Date.now();\n        this.oidcSecurityCommon.authNonce = nonce;\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + this.oidcSecurityCommon.authStateControl);\n\n        let url = '';\n\n        // Code Flow\n        if (this.authConfiguration.response_type === 'code') {\n\n            // code_challenge with \"S256\"\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\n\n            this.oidcSecurityCommon.code_verifier = code_verifier;\n\n            if (this.authWellKnownEndpoints) {\n                url = this.createAuthorizeUrl(true, code_challenge,\n                    this.authConfiguration.silent_redirect_url,\n                    nonce,\n                    state,\n                    this.authWellKnownEndpoints.authorization_endpoint,\n                    'none'\n                );\n            } else {\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n            }\n        } else {\n            if (this.authWellKnownEndpoints) {\n                url = this.createAuthorizeUrl(false, '',\n                    this.authConfiguration.silent_redirect_url,\n                    nonce,\n                    state,\n                    this.authWellKnownEndpoints.authorization_endpoint,\n                    'none'\n                );\n            } else {\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n            }\n        }\n\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\n        return this.oidcSecuritySilentRenew.startRenew(url);\n    }\n\n    handleError(error: any) {\n        this.loggerService.logError(error);\n        if (error.status === 403 || error.status === '403') {\n            if (this.authConfiguration.trigger_authorization_result_event) {\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet));\n            } else {\n                this.router.navigate([this.authConfiguration.forbidden_route]);\n            }\n        } else if (error.status === 401 || error.status === '401') {\n            const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n\n            this.resetAuthorizationData(!!silentRenew);\n\n            if (this.authConfiguration.trigger_authorization_result_event) {\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet));\n            } else {\n                this.router.navigate([this.authConfiguration.unauthorized_route]);\n            }\n        }\n    }\n\n    startCheckingSilentRenew(): void {\n        this.runTokenValidation();\n    }\n\n    stopCheckingSilentRenew(): void {\n        if (this._scheduledHeartBeat) {\n            clearTimeout(this._scheduledHeartBeat);\n            this._scheduledHeartBeat = null;\n            this.runTokenValidationRunning = false;\n        }\n    }\n\n    resetAuthorizationData(isRenewProcess: boolean): void {\n        if (!isRenewProcess) {\n            if (this.authConfiguration.auto_userinfo) {\n                // Clear user data. Fixes #97.\n                this.setUserData('');\n            }\n\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\n            this.checkSessionChanged = false;\n            this.setIsAuthorized(false);\n        }\n    }\n\n    getEndSessionUrl(): string | undefined {\n        if (this.authWellKnownEndpoints) {\n            if (this.authWellKnownEndpoints.end_session_endpoint) {\n                const end_session_endpoint = this.authWellKnownEndpoints.end_session_endpoint;\n                const id_token_hint = this.oidcSecurityCommon.idToken;\n                return this.createEndSessionUrl(end_session_endpoint, id_token_hint);\n            }\n        }\n    }\n\n    private getValidatedStateResult(result: any, jwtKeys: JwtKeys): ValidateStateResult {\n        if (result.error) {\n            return new ValidateStateResult('', '', false, {});\n        }\n\n        return this.stateValidationService.validateState(result, jwtKeys);\n    }\n\n    private setUserData(userData: any): void {\n        this.oidcSecurityCommon.userData = userData;\n        this._userData.next(userData);\n    }\n\n    private setIsAuthorized(isAuthorized: boolean): void {\n        this._isAuthorized.next(isAuthorized);\n    }\n\n    private setAuthorizationData(access_token: any, id_token: any) {\n        if (this.oidcSecurityCommon.accessToken !== '') {\n            this.oidcSecurityCommon.accessToken = '';\n        }\n\n        this.loggerService.logDebug(access_token);\n        this.loggerService.logDebug(id_token);\n        this.loggerService.logDebug('storing to storage, getting the roles');\n        this.oidcSecurityCommon.accessToken = access_token;\n        this.oidcSecurityCommon.idToken = id_token;\n        this.setIsAuthorized(true);\n        this.oidcSecurityCommon.isAuthorized = true;\n    }\n\n    private createAuthorizeUrl(isCodeFlow: boolean, code_challenge: string, redirect_url: string, nonce: string, state: string, authorization_endpoint: string, prompt?: string): string {\n        const urlParts = authorization_endpoint.split('?');\n        const authorizationUrl = urlParts[0];\n        let params = new HttpParams({\n            fromString: urlParts[1],\n            encoder: new UriEncoder(),\n        });\n        params = params.set('client_id', this.authConfiguration.client_id);\n        params = params.append('redirect_uri', redirect_url);\n        params = params.append('response_type', this.authConfiguration.response_type);\n        params = params.append('scope', this.authConfiguration.scope);\n        params = params.append('nonce', nonce);\n        params = params.append('state', state);\n\n        if (isCodeFlow) {\n\n            params = params.append('code_challenge', code_challenge);\n            params = params.append('code_challenge_method', 'S256');\n        }\n\n        if (prompt) {\n            params = params.append('prompt', prompt);\n        }\n\n        if (this.authConfiguration.hd_param) {\n            params = params.append('hd', this.authConfiguration.hd_param);\n        }\n\n        const customParams = Object.assign({}, this.oidcSecurityCommon.customRequestParams);\n\n        Object.keys(customParams).forEach(key => {\n            params = params.append(key, customParams[key].toString());\n        });\n\n        return `${authorizationUrl}?${params}`;\n    }\n\n    private createEndSessionUrl(end_session_endpoint: string, id_token_hint: string) {\n        const urlParts = end_session_endpoint.split('?');\n\n        const authorizationEndsessionUrl = urlParts[0];\n\n        let params = new HttpParams({\n            fromString: urlParts[1],\n            encoder: new UriEncoder(),\n        });\n        params = params.set('id_token_hint', id_token_hint);\n        params = params.append('post_logout_redirect_uri', this.authConfiguration.post_logout_redirect_uri);\n\n        return `${authorizationEndsessionUrl}?${params}`;\n    }\n\n    private getSigningKeys(): Observable<JwtKeys> {\n        if (this.authWellKnownEndpoints) {\n            this.loggerService.logDebug('jwks_uri: ' + this.authWellKnownEndpoints.jwks_uri);\n\n            return this.oidcDataService.get<JwtKeys>(this.authWellKnownEndpoints.jwks_uri).pipe(catchError(this.handleErrorGetSigningKeys));\n        } else {\n            this.loggerService.logWarning('getSigningKeys: authWellKnownEndpoints is undefined');\n        }\n\n        return this.oidcDataService.get<JwtKeys>('undefined').pipe(catchError(this.handleErrorGetSigningKeys));\n    }\n\n    private handleErrorGetSigningKeys(error: Response | any) {\n        let errMsg: string;\n        if (error instanceof Response) {\n            const body = error.json() || {};\n            const err = JSON.stringify(body);\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n        } else {\n            errMsg = error.message ? error.message : error.toString();\n        }\n        console.error(errMsg);\n        return observableThrowError(errMsg);\n    }\n\n    private runTokenValidation() {\n        if (this.runTokenValidationRunning || !this.authConfiguration.silent_renew) {\n            return;\n        }\n        this.runTokenValidationRunning = true;\n        this.loggerService.logDebug('runTokenValidation silent-renew running');\n\n        /**\n            First time: delay 10 seconds to call silentRenewHeartBeatCheck\n            Afterwards: Run this check in a 5 second interval only AFTER the previous operation ends.\n         */\n        const silentRenewHeartBeatCheck = () => {\n            this.loggerService.logDebug(\n                'silentRenewHeartBeatCheck\\r\\n' +\n                    `\\tsilentRenewRunning: ${this.oidcSecurityCommon.silentRenewRunning === 'running'}\\r\\n` +\n                    `\\tidToken: ${!!this.getIdToken()}\\r\\n` +\n                    `\\t_userData.value: ${!!this._userData.value}`\n            );\n            if (this._userData.value && this.oidcSecurityCommon.silentRenewRunning !== 'running' && this.getIdToken()) {\n                if (\n                    this.oidcSecurityValidation.isTokenExpired(this.oidcSecurityCommon.idToken, this.authConfiguration.silent_renew_offset_in_seconds)\n                ) {\n                    this.loggerService.logDebug('IsAuthorized: id_token isTokenExpired, start silent renew if active');\n\n                    if (this.authConfiguration.silent_renew) {\n                        this.refreshSession().subscribe(\n                            () => {\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\n                            },\n                            (err: any) => {\n                                this.loggerService.logError('Error: ' + err);\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\n                            }\n                        );\n                        /* In this situation, we schedule a heatbeat check only when silentRenew is finished.\n                        We don't want to schedule another check so we have to return here */\n                        return;\n                    } else {\n                        this.resetAuthorizationData(false);\n                    }\n                }\n            }\n\n            /* Delay 3 seconds and do the next check */\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\n        };\n\n        this.zone.runOutsideAngular(() => {\n            /* Initial heartbeat check */\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 10000);\n        });\n    }\n\n    private silentRenewEventHandler(e: CustomEvent) {\n        this.loggerService.logDebug('silentRenewEventHandler');\n\n        if (this.authConfiguration.response_type === 'code') {\n\n            const urlParts = e.detail.toString().split('?');\n            const params = new HttpParams({\n                fromString: urlParts[1]\n            });\n            const code = params.get('code');\n            const state = params.get('state');\n            const session_state = params.get('session_state');\n            const error = params.get('error');\n            if (code && state) {\n                this.requestTokensWithCodeProcedure(code, state, session_state);\n            }\n            if (error) {\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.LoginRequired));\n                this.resetAuthorizationData(false);\n                this.oidcSecurityCommon.authNonce = '';\n                this.loggerService.logDebug(e.detail.toString());\n            }\n\n        } else {\n            // ImplicitFlow\n            this.authorizedImplicitFlowCallback(e.detail);\n        }\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { OidcDataService } from '../data-services/oidc-data.service';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nimport { IFrameService } from '../services/existing-iframe.service';\nimport { EqualityHelperService } from '../services/oidc-equality-helper.service';\nimport { StateValidationService } from '../services/oidc-security-state-validation.service';\nimport { TokenHelperService } from '../services/oidc-token-helper.service';\nimport { LoggerService } from '../services/oidc.logger.service';\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\nimport { OidcConfigService } from '../services/oidc.security.config.service';\nimport { OidcSecurityService } from '../services/oidc.security.service';\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\nimport { BrowserStorage, OidcSecurityStorage } from '../services/oidc.security.storage';\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\nimport { AuthConfiguration } from './auth.configuration';\n\n@NgModule()\nexport class AuthModule {\n    static forRoot(token: Token = {}): ModuleWithProviders {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcConfigService,\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                AuthConfiguration,\n                TokenHelperService,\n                LoggerService,\n                IFrameService,\n                EqualityHelperService,\n                AuthWellKnownEndpoints,\n                OidcDataService,\n                StateValidationService,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage,\n                },\n            ],\n        };\n    }\n}\n\nexport interface Type<T> extends Function {\n    new (...args: any[]): T;\n}\n\nexport interface Token {\n    storage?: Type<any>;\n}\n"]}